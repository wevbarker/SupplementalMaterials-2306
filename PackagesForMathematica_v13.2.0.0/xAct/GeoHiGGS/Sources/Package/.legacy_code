



(*----------------------------------------------*)
(*  Some legacy code from the notebook version  *)
(*----------------------------------------------*)


(* ::Code::Initialization:: *)
(*ctensorSymb="\[ScriptC]";
Quiet@UndefTensor@ctensor;
DefTensor[ctensor[i,-m,-n],M4,Antisymmetric[{-m,-n}],PrintAs->SymbolBuild[ctensorSymb]];
ctensorActivate=MakeRule[{ctensor[i,-m,-n],CD[-m][B[i,-n]]-CD[-n][B[i,-m]]},MetricOn\[Rule]All,ContractMetrics\[Rule]True];
ClearBuild[];*)


(* ::Code::Initialization:: *)
(*RicciRotSymb="\[CapitalDelta]";
Quiet@UndefTensor@RicciRot;
DefTensor[RicciRot[i,j,-l],M4,Antisymmetric[{i,j}],PrintAs->SymbolBuild[RicciRotSymb]];
RicciRotDefinition=(1/2)(ctensor[i,-m,-n]H[j,m]H[-k,n]-ctensor[-k,-m,-n]H[i,m]H[j,n]+ctensor[j,-m,-n]H[-k,m]H[i,n])B[k,-l]/.ctensorActivate//ToNewCanonical;
RicciRotActivate=MakeRule[{RicciRot[i,j,-l],Evaluate@RicciRotDefinition},MetricOn\[Rule]All,ContractMetrics\[Rule]True];
ClearBuild[];*)


(* ::Code::Initialization:: *)
(*ChristofSymb="\[CapitalGamma]";
Quiet@UndefTensor@Christof;
DefTensor[Christof[i,-j,-k],M4,Symmetric[{-j,-k}],PrintAs->SymbolBuild[ChristofSymb]];
ChristofDefinition=(1/2)H[x,i]H[-x,l](CD[-j][B[y,-l]B[-y,-k]]+CD[-k][B[y,-l]B[-y,-j]]-CD[-l][B[y,-j]B[-y,-k]])//ToNewCanonical;
ChristofActivate=MakeRule[{Christof[i,-j,-k],Evaluate@ChristofDefinition},MetricOn\[Rule]All,ContractMetrics\[Rule]True];
ClearBuild[];*)


(* ::Code::Initialization:: *)
(*ContorsionSymb="\[ScriptCapitalK]";
Quiet@UndefTensor@Contorsion;
DefTensor[Contorsion[i,-k,-l],M4,PrintAs\[Rule]SymbolBuild[ContorsionSymb]];
ContorsionToTorsion=MakeRule[{Contorsion[m,-l,-n],-(1/2)(T[m,-l,-n]-T[-n,m,-l]+T[-l,-n,m])},MetricOn\[Rule]All,ContractMetrics\[Rule]True];
RotationToRicci=MakeRule[{A[-i,-j,-m],RicciRot[-i,-j,-m]+B[k,-m]Contorsion[-i,-j,-k]},MetricOn\[Rule]All,ContractMetrics\[Rule]True];
ClearBuild[];*)


(*
PSymb="\[ScriptK]";
Quiet@UndefTensor@P;
DefTensor[P[a],M4,PrintAs->SymbolBuild@PSymb];

PgSymb="k";
Quiet@UndefTensor@Pg;
DefTensor[Pg[a],M4,PrintAs->SymbolBuild@PgSymb];

PToPg=MakeRule[{P[a],B[a,-b]Pg[b]},MetricOn\[Rule]All,ContractMetrics\[Rule]True];
PgToP=MakeRule[{Pg[a],H[-b,a]P[b]},MetricOn\[Rule]All,ContractMetrics\[Rule]True];

(CD[-a][Pg[b]]-Christof[b,-c,-a]Pg[c])/.ChristofActivate;
%//ToNewCanonical;
CDPDefinition=%;
CDPToCDP=MakeRule[{CD[-a][Pg[b]],Evaluate[CDPDefinition]},MetricOn\[Rule]All,ContractMetrics\[Rule]True];

CD[-a][P[b]]+A[b,-c,-a]P[c];
%/.RotationToRicci//ToNewCanonical;
%/.RicciRotActivate/.ContorsionToTorsion//ToNewCanonical;
%/.PToPg//ToNewCanonical;
%/.CDPToCDP//ToNewCanonical;
%//ToCanonical;
*)

